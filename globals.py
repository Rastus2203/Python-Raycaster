import pygame
from collections import *

enemies = []
items = []
HEIGHT = 768
WIDTH = 1024
zde = 0.0000001
drawBuffer = []
directions = ((0,1), (0,-1), (1,0), (-1,0))
#worldMap = []




baseAngles = [0.0, 0.17578125, 0.3515625, 0.52734375, 0.703125, 0.87890625, 1.0546875, 1.23046875, 1.40625, 1.58203125, 1.7578125, 1.93359375, 2.109375, 2.28515625, 2.4609375, 2.63671875, 2.8125, 2.98828125, 3.1640625, 3.33984375, 3.515625, 3.69140625, 3.8671875, 4.04296875, 4.21875, 4.39453125, 4.5703125, 4.74609375, 4.921875, 5.09765625, 5.2734375, 5.44921875, 5.625, 5.80078125, 5.9765625, 6.15234375, 6.328125, 6.50390625, 6.6796875, 6.85546875, 7.03125, 7.20703125, 7.3828125, 7.55859375, 7.734375, 7.91015625, 8.0859375, 8.26171875, 8.4375, 8.61328125, 8.7890625, 8.96484375, 9.140625, 9.31640625, 9.4921875, 9.66796875, 9.84375, 10.01953125, 10.1953125, 10.37109375, 10.546875, 10.72265625, 10.8984375, 11.07421875, 11.25, 11.42578125, 11.6015625, 11.77734375, 11.953125, 12.12890625, 12.3046875, 12.48046875, 12.65625, 12.83203125, 13.0078125, 13.18359375, 13.359375, 13.53515625, 13.7109375, 13.88671875, 14.0625, 14.23828125, 14.4140625, 14.58984375, 14.765625, 14.94140625, 15.1171875, 15.29296875, 15.46875, 15.64453125, 15.8203125, 15.99609375, 16.171875, 16.34765625, 16.5234375, 16.69921875, 16.875, 17.05078125, 17.2265625, 17.40234375, 17.578125, 17.75390625, 17.9296875, 18.10546875, 18.28125, 18.45703125, 18.6328125, 18.80859375, 18.984375, 19.16015625, 19.3359375, 19.51171875, 19.6875, 19.86328125, 20.0390625, 20.21484375, 20.390625, 20.56640625, 20.7421875, 20.91796875, 21.09375, 21.26953125, 21.4453125, 21.62109375, 21.796875, 21.97265625, 22.1484375, 22.32421875, 22.5, 22.67578125, 22.8515625, 23.02734375, 23.203125, 23.37890625, 23.5546875, 23.73046875, 23.90625, 24.08203125, 24.2578125, 24.43359375, 24.609375, 24.78515625, 24.9609375, 25.13671875, 25.3125, 25.48828125, 25.6640625, 25.83984375, 26.015625, 26.19140625, 26.3671875, 26.54296875, 26.71875, 26.89453125, 27.0703125, 27.24609375, 27.421875, 27.59765625, 27.7734375, 27.94921875, 28.125, 28.30078125, 28.4765625, 28.65234375, 28.828125, 29.00390625, 29.1796875, 29.35546875, 29.53125, 29.70703125, 29.8828125, 30.05859375, 30.234375, 30.41015625, 30.5859375, 30.76171875, 30.9375, 31.11328125, 31.2890625, 31.46484375, 31.640625, 31.81640625, 31.9921875, 32.16796875, 32.34375, 32.51953125, 32.6953125, 32.87109375, 33.046875, 33.22265625, 33.3984375, 33.57421875, 33.75, 33.92578125, 34.1015625, 34.27734375, 34.453125, 34.62890625, 34.8046875, 34.98046875, 35.15625, 35.33203125, 35.5078125, 35.68359375, 35.859375, 36.03515625, 36.2109375, 36.38671875, 36.5625, 36.73828125, 36.9140625, 37.08984375, 37.265625, 37.44140625, 37.6171875, 37.79296875, 37.96875, 38.14453125, 38.3203125, 38.49609375, 38.671875, 38.84765625, 39.0234375, 39.19921875, 39.375, 39.55078125, 39.7265625, 39.90234375, 40.078125, 40.25390625, 40.4296875, 40.60546875, 40.78125, 40.95703125, 41.1328125, 41.30859375, 41.484375, 41.66015625, 41.8359375, 42.01171875, 42.1875, 42.36328125, 42.5390625, 42.71484375, 42.890625, 43.06640625, 43.2421875, 43.41796875, 43.59375, 43.76953125, 43.9453125, 44.12109375, 44.296875, 44.47265625, 44.6484375, 44.82421875, 45.0, 45.17578125, 45.3515625, 45.52734375, 45.703125, 45.87890625, 46.0546875, 46.23046875, 46.40625, 46.58203125, 46.7578125, 46.93359375, 47.109375, 47.28515625, 47.4609375, 47.63671875, 47.8125, 47.98828125, 48.1640625, 48.33984375, 48.515625, 48.69140625, 48.8671875, 49.04296875, 49.21875, 49.39453125, 49.5703125, 49.74609375, 49.921875, 50.09765625, 50.2734375, 50.44921875, 50.625, 50.80078125, 50.9765625, 51.15234375, 51.328125, 51.50390625, 51.6796875, 51.85546875, 52.03125, 52.20703125, 52.3828125, 52.55859375, 52.734375, 52.91015625, 53.0859375, 53.26171875, 53.4375, 53.61328125, 53.7890625, 53.96484375, 54.140625, 54.31640625, 54.4921875, 54.66796875, 54.84375, 55.01953125, 55.1953125, 55.37109375, 55.546875, 55.72265625, 55.8984375, 56.07421875, 56.25, 56.42578125, 56.6015625, 56.77734375, 56.953125, 57.12890625, 57.3046875, 57.48046875, 57.65625, 57.83203125, 58.0078125, 58.18359375, 58.359375, 58.53515625, 58.7109375, 58.88671875, 59.0625, 59.23828125, 59.4140625, 59.58984375, 59.765625, 59.94140625, 60.1171875, 60.29296875, 60.46875, 60.64453125, 60.8203125, 60.99609375, 61.171875, 61.34765625, 61.5234375, 61.69921875, 61.875, 62.05078125, 62.2265625, 62.40234375, 62.578125, 62.75390625, 62.9296875, 63.10546875, 63.28125, 63.45703125, 63.6328125, 63.80859375, 63.984375, 64.16015625, 64.3359375, 64.51171875, 64.6875, 64.86328125, 65.0390625, 65.21484375, 65.390625, 65.56640625, 65.7421875, 65.91796875, 66.09375, 66.26953125, 66.4453125, 66.62109375, 66.796875, 66.97265625, 67.1484375, 67.32421875, 67.5, 67.67578125, 67.8515625, 68.02734375, 68.203125, 68.37890625, 68.5546875, 68.73046875, 68.90625, 69.08203125, 69.2578125, 69.43359375, 69.609375, 69.78515625, 69.9609375, 70.13671875, 70.3125, 70.48828125, 70.6640625, 70.83984375, 71.015625, 71.19140625, 71.3671875, 71.54296875, 71.71875, 71.89453125, 72.0703125, 72.24609375, 72.421875, 72.59765625, 72.7734375, 72.94921875, 73.125, 73.30078125, 73.4765625, 73.65234375, 73.828125, 74.00390625, 74.1796875, 74.35546875, 74.53125, 74.70703125, 74.8828125, 75.05859375, 75.234375, 75.41015625, 75.5859375, 75.76171875, 75.9375, 76.11328125, 76.2890625, 76.46484375, 76.640625, 76.81640625, 76.9921875, 77.16796875, 77.34375, 77.51953125, 77.6953125, 77.87109375, 78.046875, 78.22265625, 78.3984375, 78.57421875, 78.75, 78.92578125, 79.1015625, 79.27734375, 79.453125, 79.62890625, 79.8046875, 79.98046875, 80.15625, 80.33203125, 80.5078125, 80.68359375, 80.859375, 81.03515625, 81.2109375, 81.38671875, 81.5625, 81.73828125, 81.9140625, 82.08984375, 82.265625, 82.44140625, 82.6171875, 82.79296875, 82.96875, 83.14453125, 83.3203125, 83.49609375, 83.671875, 83.84765625, 84.0234375, 84.19921875, 84.375, 84.55078125, 84.7265625, 84.90234375, 85.078125, 85.25390625, 85.4296875, 85.60546875, 85.78125, 85.95703125, 86.1328125, 86.30859375, 86.484375, 86.66015625, 86.8359375, 87.01171875, 87.1875, 87.36328125, 87.5390625, 87.71484375, 87.890625, 88.06640625, 88.2421875, 88.41796875, 88.59375, 88.76953125, 88.9453125, 89.12109375, 89.296875, 89.47265625, 89.6484375, 89.82421875]


pygame.init()
screenSize = (WIDTH,HEIGHT)
screen = pygame.display.set_mode(screenSize) #, pygame.FULLSCREEN)
pygame.display.toggle_fullscreen()
pygame.display.set_caption('Hmm')


def drawText(text,size,color, coord):
    # initialize font; must be called after 'pygame.init()' to avoid 'Font not Initialized' error
    myfont = pygame.font.SysFont("fff-forward", size)
    # render text
    label = myfont.render(str(text), 1, color)
    screen.blit(label, coord)

def bfs(p1, p2, worldMap):
    p1 = tuple([int(i) for i in p1])
    p2 = tuple([int(i) for i in p2])

    todo = deque()
    todo.append(((p2),))
    seen = set()
    seen.add(p1)



    while len(todo) > 0:
        #print(seen)
        current = todo.popleft()

        for i in directions:

            pos = tuple([sum(x) for x in zip(current[-1], i)])
            if pos == p1:
                return current

            if pos not in seen:
                seen.add(pos)

                if worldMap[int(pos[1])][int(pos[0])] == 0:
                    todo.append(current + (pos,))


    else:
        #print("Can't find player")

        return


#Probably unnecessary

#Returns whether p1 and p2 have line of sight of eachother.
#Uses slightly modified Bresenham Line Algorithm
def lineOfSight(p1, p2, worldMap):
    x0 = int(p1[0])
    y0 = int(p1[1])

    x1 = int(p2[0])
    y1 = int(p2[1])

    dx = (x1 - x0)
    dy = (y1 - y0)

    if dy < 0:
        dy = -dy
        yStep = -1

    else:
        yStep = 1

    if dx < 0:
        dx = -dx
        xStep = -1

    else:
        xStep = 1

    dx <<= 2
    dy <<= 2

    hit = False

    if dx > dy:
        fraction = dy - (dx >> 1)
        while x0 != x1 and not hit:
            if fraction >= 0:
                y0 += yStep
                fraction -= dx
            x0 += xStep
            fraction += dy
            if worldMap[y0][x0] != 0:
                hit = True
            #pygame.draw.circle(screen, [0,0,255], (int(x0*20+10), int(y0*20+10)), 5)
    else:
        fraction = dx - (dy >> 1)
        while y0 != y1 and not hit:
            if fraction >= 0:
                x0 += xStep
                fraction -= dy
            y0 += yStep
            fraction += dx
            if worldMap[y0][x0] != 0:
                hit = True
            #pygame.draw.circle(screen, [0,0,255], (int(x0*20+10), int(y0*20+10)), 5)

    return not hit
